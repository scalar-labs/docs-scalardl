#!/usr/bin/env python3
"""
Generate llms-full.txt by using gitingest instead of docusaurus-plugin-llms
"""

import asyncio
import sys
import textwrap
from pathlib import Path

try:
    from gitingest import ingest_async
except ImportError:
    print("‚ùå gitingest not found. Please install it first:")
    print("  pip install --user gitingest")
    print("  # or")
    print("  pipx install gitingest")
    print("")
    print("For GitHub Actions, this should be installed automatically in the workflow.")
    sys.exit(1)


async def generate_llms_full():
    """Generate llms-full.txt by using gitingest."""
    try:
        print("Generating llms-full.txt by using gitingest...")

        # Current repository path
        repo_path = Path(__file__).parent.parent
        build_dir = repo_path / "build"
        build_dir.mkdir(exist_ok=True)

        # Configure the gitingest parameters.
        include_patterns = {
            "docs/*.mdx", "docs/**/*.mdx", "src/components/en-us/*.mdx", "src/components/en-us/**/*.mdx"
        }

        exclude_patterns = {
            "node_modules/*", ".git/*", "build/*", 
            "*.log", ".next/*", "dist/*", ".docusaurus/*"
        }

        # Generate content by using gitingest.
        summary, tree, content = await ingest_async(
            str(repo_path),
            max_file_size=100000, # 100 KB max file size
            include_patterns=include_patterns,
            exclude_patterns=exclude_patterns,
            include_gitignored=False
        )

        # Create a header that matches your current format.
        header = textwrap.dedent("""\
            # ScalarDL Documentation - Full Repository Context
            # Generated by using GitIngest for AI/LLM consumption
            # Scalable and practical Byzantine-fault detection middleware for transactional database systems
            # Website: https://scalardl.scalar-labs.com

            """)

        # Combine all sections.
        full_content = header + summary + "\n\n" + tree + "\n\n" + content

        # Write to the build directory.
        output_path = build_dir / "llms-full.txt"
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(full_content)

        print(f"‚úÖ llms-full.txt generated successfully at {output_path}")
        print(f"üìä Summary: {len(full_content)} characters, estimated tokens: {len(full_content.split())}")

    except Exception as error:
        print(f"‚ùå Error generating llms-full.txt: {error}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(generate_llms_full())
